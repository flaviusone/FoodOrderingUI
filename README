Echipa:
Ioana Culic (ISI)
Irina Gosu (EGOV)
Flavius Tirnacop (EGOV)

Sistem colaborativ pentru comandat mancare - Etapa a doua

0) Proiectul consta intr-o aplicatie WEB care permite oamenilor gruparea pentru a comanda mancare in functie de furnizorul dorit.

1) Pana la data de 26 noiembrie am dezvoltat un script care parcurge site-ul FoodPanda pentru a extrage informatiile necesare. Astfel se obtine o structura JSON care contine toate datele necesare legate de restaurantele existente (meniu, pretul produselor, durata pana la livrare etc.).

Scriptul a fost realizat in NodeJS si acceseaza paginile FoodPanda dupa care parseaza structura acestora. Pentru a realiza asta, am folosit modulul "cheerio" (https://github.com/cheeriojs/cheerio).

Pasi testare:
  - npm install
  - npm run getRestaurants genereaza JSON cu URL-uri catre paginile cu meniuri ale restaurantelor
  - npm run generateMenu genereaza JSON cu date meniu restaurante

2) In ceea ce priveste serverul, acesta e realizat tot in NodeJS si stocheaza datele intr-o baza de date mongoDB. Baza de date este constituita din trei modele descriind utilizatorii, camerele de discutie si restaurantele existente. In momentul de fata exista functiile prin intermediul carora serverul manipuleaza baza de date. Am realizat acest lucru folosind modulul "mongoose" (http://mongoosejs.com). Pentru implementa serverul am folosit framework-ul "express" (http://expressjs.com). De asemenea serverul are inregistrate cateva rute de baza care vor fi folosite pentru interactiunea cu clientul WEB.

Pasi testare:
  - npm install
  - npm run start

3) Clientul este realizat folosind React (https://facebook.github.io/react) si este structurat sub forma unor componente de sine statatoare (folderul components) ce folosesc LESS pentru styling. In momentul de fata avem o interfata minimala ce respecta designurile initiale (lista rooms, lista useri, chat central).

Pentru dezvoltare s-au folost o serie de tooluri open source cum ar fi Cosmos (https://github.com/skidding/cosmos) si Webpack. Cosmos permite randarea componentelor intr-un mediu izolat prin itermediul unor fixturi (folderul fixtures) ce vor descrie starea acestora. Cosmos de asemenea foloseste Webpack, tool folosit si de noi pentru a bunde-ui toate fisierele JS/CSS in unul singur bundle.js/styles.css.

Pasi testare:
  - npm install
  - npm run build - creaza bundle.js/styles.css (vor fi incarcate de server)
  - npm run start - deschide un server webpack de dezvoltare la http://localhost:8080/
  - npm run playground - incarca Cosmos ce poate fi accesat la http://localhost:8989/


4) Concluzii

In momentul de fata cele trei componente nu au fost integrate. Urmatorul pas este ca server-ul sa foloseasca scriptul de parcurgere a FoodPanda pentru a stoca in baza de date informatii despre restaurante. De asemenea vom realiza comunicarea intre server si client pe baza unui REST API pe care l-am stabilit deja.

In plus, urmeaza sa adaugat partea de comunicare (chat) site-ului si vom permite utilizatorilor autentificarea folosind contul de facebook. De asemenea vom dezvolta posibilitatea de a cauta diverse meniuri in functie de niste cuvinte cheie.

